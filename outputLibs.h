/*
Generated by Steve's closure script
*/
// Original function name: g_object_unref
#include <gtk/gtk.h>

// Original function name: cairo_rectangle
cairo_rectangle          (cairo_t              *cr,
                                         const GdkRectangle   *rectangle);
// Original function name: gdk_cairo_set_source_rgba
gdk_cairo_set_source_rgba    (cairo_t              *cr,
                                         const GdkRGBA        *rgba);
// Original function name: cairo_set_source_rgb
cairo_set_source_rgba    (cairo_t              *cr,
                                         const GdkRGBA        *rgba);
// Original function name: cairo_set_source_rgba
cairo_set_source_rgba    (cairo_t              *cr,
                                         const GdkRGBA        *rgba);
// Original function name: cairo_set_source_rgba 
cairo_set_source_rgba    (cairo_t              *cr,
                                         const GdkRGBA        *rgba);
// Original function name: cairo_create
cairo_create             (GdkWindow          *window);
// Original function name: gdk_cairo_set_source_rgba 
gdk_cairo_set_source_rgba    (cairo_t              *cr,
                                         const GdkRGBA        *rgba);
// Original function name: g_object_unref
g_object_unref)
void        gdk_cursor_unref             (GdkCursor       *cursor);
// Original function name: gdk_rgba_copy
gdk_rgba_copy      (const GdkRGBA *rgba);
// Original function name: gdk_rgba_parse
gdk_rgba_parse     (GdkRGBA       *rgba,
                              const gchar   *spec);
// Original function name: gdk_threads_leave
gdk_threads_leave                    (void);
// Original function name: gdk_threads_init
gdk_threads_init                     (void);
// Original function name: gdk_threads_enter
gdk_threads_enter                    (void);
// Original function name: gdk_window_invalidate_rect 
gdk_window_invalidate_rect           (GdkWindow          *window,
					         const GdkRectangle *rect,
					         gboolean            invalidate_children);
// Original function name: gdk_window_create_similar_surface
gdk_window_create_similar_surface (GdkWindow *window,
                                          cairo_content_t  content,
                                          int              width,
                                          int              height);
// Original function name: gdk_window_get_origin
gdk_window_get_origin	 (GdkWindow	  *window,
					  gint		  *x,
					  gint		  *y);
// Original function name: gdk_rgba_copy
GdkColor *gdk_color_copy      (const GdkColor *color);
// Original function name: gdk_rgba_parse
gboolean  gdk_color_parse     (const gchar    *spec,
                               GdkColor       *color);

// Original function name: g_add_credit_section
g_add_credit_section      (GtkAboutDialog  *about,
                                                                const gchar     *section_name,
                                                                const gchar    **people);
// Original function name: g_set_copyright
g_set_copyright          (GtkAboutDialog  *about,
                                                                const gchar     *copyright);
// Original function name: gtk_about_dialog_set_copyright
gtk_about_dialog_set_copyright          (GtkAboutDialog  *about,
                                                                const gchar     *copyright);
// Original function name: gtk_about_dialog_add_credit_section
gtk_about_dialog_add_credit_section      (GtkAboutDialog  *about,
                                                                const gchar     *section_name,
                                                                const gchar    **people);
// Original function name: gtk_about_dialog_set_website_label
gtk_about_dialog_set_website_label      (GtkAboutDialog  *about,
                                                                const gchar     *website_label);
// Original function name: gtk_about_dialog_set_comments
gtk_about_dialog_set_comments           (GtkAboutDialog  *about,
                                                                const gchar     *comments);
// Original function name: gtk_about_dialog_set_website
gtk_about_dialog_set_website            (GtkAboutDialog  *about,
                                                                const gchar     *website);
// Original function name: gtk_about_dialog_set_logo
gtk_about_dialog_set_logo               (GtkAboutDialog  *about,
                                                                GdkPixbuf       *logo);
// Original function name: g_set_program_name
g_set_program_name       (GtkAboutDialog  *about,
                                                                const gchar     *name);
// Original function name: g_set_logo
g_set_logo               (GtkAboutDialog  *about,
                                                                GdkPixbuf       *logo);
// Original function name: g_set_website_label
g_set_website_label      (GtkAboutDialog  *about,
                                                                const gchar     *website_label);
// Original function name: g_set_version
g_set_version            (GtkAboutDialog  *about,
                                                                const gchar     *version);
// Original function name: g_set_website
g_set_website            (GtkAboutDialog  *about,
                                                                const gchar     *website);
// Original function name: g_set_comments
g_set_comments           (GtkAboutDialog  *about,
                                                                const gchar     *comments);
// Original function name: gtk_about_dialog_set_version
gtk_about_dialog_set_version            (GtkAboutDialog  *about,
                                                                const gchar     *version);
// Original function name: gtk_about_dialog_new
gtk_about_dialog_new                    (void);
// Original function name: gtk_about_dialog_set_program_name
gtk_about_dialog_set_program_name       (GtkAboutDialog  *about,
                                                                const gchar     *name);
// Original function name: gtk_show_about_dialog
gtk_show_about_dialog                   (GtkWindow       *parent,
                                                                const gchar     *first_property_name,
                                                                ...) G_GNUC_NULL_TERMINATED;
// Original function name: g_new
g_new                    (void);
// Original function name: g_new
g_new                  (GtkWindow           *parent,
                                                           GtkDialogFlags       flags,
                                                           GFile               *file);
// Original function name: gtk_box_new
gtk_box_new                 (GtkOrientation  orientation,
                                         gint            spacing);
// Original function name: gtk_builder_add_from_file
gtk_builder_add_from_file           (GtkBuilder    *builder,
                                                  const gchar   *filename,
                                                  GError       **error);
// Original function name: gtk_builder_new
gtk_builder_new                     (void);
// Original function name: gtk_builder_get_object
gtk_builder_get_object              (GtkBuilder    *builder,
                                                  const gchar   *name);
// Original function name: g_new
g_new      (const gchar *title,
                                               GtkWindow   *parent);
// Original function name: gtk_container_set_border_width
gtk_container_set_border_width	 (GtkContainer	   *container,
					  guint		    border_width);
// Original function name: gtk_container_get_children
gtk_container_get_children     (GtkContainer       *container);
// Original function name: gtk_container_forall
gtk_container_forall		     (GtkContainer *container,
					      GtkCallback   callback,
					      gpointer	    callback_data);
// Original function name: gtk_container_add
gtk_container_add		 (GtkContainer	   *container,
					  GtkWidget	   *widget);
// Original function name: gtk_css_provider_load_from_path
gtk_css_provider_load_from_path (GtkCssProvider  *css_provider,
                                                  const gchar     *path,
                                                  GError         **error);
// Original function name: gtk_css_provider_new
gtk_css_provider_new (void);
// Original function name: g_run
g_run                (GtkDialog *dialog);
// Original function name: gtk_dialog_run
gtk_dialog_run                (GtkDialog *dialog);
// Original function name: g_new
g_new      (void);
// Original function name: gtk_drawing_area_new
gtk_drawing_area_new      (void);
// Original function name: g_area_new
g_area_new      (void);
// Original function name: gtk_entry_get_text
gtk_entry_get_text_area              (GtkEntry       *entry,
                                                 GdkRectangle   *text_area);
// Original function name: g_new
g_new              (const gchar          *title,
						     GtkWindow            *parent,
						     GtkFileChooserAction  action,
						     const gchar          *first_button_text,
						     ...) G_GNUC_NULL_TERMINATED;
// Original function name: gtk_fixed_move
gtk_fixed_move              (GtkFixed       *fixed,
                                        GtkWidget      *widget,
                                        gint            x,
                                        gint            y);
// Original function name: gtk_fixed_put
gtk_fixed_put               (GtkFixed       *fixed,
                                        GtkWidget      *widget,
                                        gint            x,
                                        gint            y);
// Original function name: gtk_fixed_new
gtk_fixed_new               (void);
// Original function name: g_new
g_new              (const gchar          *title,
                                                     GtkWindow            *parent);
// Original function name: gtk_gesture_drag_new
gtk_gesture_drag_new               (GtkWidget      *widget);
// Original function name: g_new
g_new               (GtkWidget      *widget);
// Original function name: gtk_header_bar_set_title
gtk_header_bar_set_title         (GtkHeaderBar *bar,
                                               const gchar  *title);
// Original function name: g_object_unref
g_object_unref)
void                  gtk_icon_info_free               (GtkIconInfo  *icon_info);
// Original function name: gtk_image_set_from_file
gtk_image_set_from_file      (GtkImage        *image,
                                   const gchar     *filename);
// Original function name: gtk_label_set_angle
gtk_label_set_angle                      (GtkLabel         *label,
						   gdouble           angle);
// Original function name: gtk_label_new
gtk_label_new               (const gchar   *str);
// Original function name: g_object_unref
g_object_unref)
G_DEFINE_AUTOPTR_CLEANUP_FUNC(GtkListBoxRow, g_object_unref)

G_END_DECLS



// Original function name: gtk_main_iteration
gtk_main_iteration      (void);
// Original function name: gtk_events_pending
gtk_events_pending       (void);
// Original function name: gtk_main
gtk_main_do_event       (GdkEvent           *event);
// Original function name: gtk_main_quit
gtk_main_quit           (void);
// Original function name: gtk_init
gtk_init                 (int    *argc,
                                   char ***argv);
// Original function name: gtk_message_dialog_new
gtk_message_dialog_new      (GtkWindow      *parent,
                                        GtkDialogFlags  flags,
                                        GtkMessageType  type,
                                        GtkButtonsType  buttons,
                                        const gchar    *message_format,
                                        ...) G_GNUC_PRINTF (5, 6);
// Original function name: g_new
g_new      (GtkWindow      *parent,
                                        GtkDialogFlags  flags,
                                        GtkMessageType  type,
                                        GtkButtonsType  buttons,
                                        const gchar    *message_format,
                                        ...) G_GNUC_PRINTF (5, 6);
// Original function name: g_run
g_run (GtkNativeDialog *self);
// Original function name: gtk_notebook_append_page
gtk_notebook_append_page       (GtkNotebook *notebook,
				     GtkWidget   *child,
				     GtkWidget   *tab_label);
// Original function name: gtk_notebook_set_current_page
gtk_notebook_set_current_page (GtkNotebook *notebook,
					  gint         page_num);
// Original function name: gtk_overlay_set_overlay_pass_through
gtk_overlay_set_overlay_pass_through (GtkOverlay *overlay,
						 GtkWidget  *widget,
						 gboolean    pass_through);
// Original function name: gtk_overlay_reorder_overlay
gtk_overlay_reorder_overlay (GtkOverlay     *overlay,
					GtkWidget      *child,
					gint            position);
// Original function name: gtk_overlay_add_overlay
gtk_overlay_add_overlay (GtkOverlay *overlay,
                                    GtkWidget  *widget);
// Original function name: g_new
g_new                   (Window      socket_id);
// Original function name: g_new
g_new             (const gchar      *title,
					              GtkWindow        *parent,
					              const gchar      *first_button_text,
					              ...) G_GNUC_NULL_TERMINATED;
// Original function name: gtk_render_background
gtk_render_background  (GtkStyleContext     *context,
                                    cairo_t             *cr,
                                    gdouble              x,
                                    gdouble              y,
                                    gdouble              width,
                                    gdouble              height);
// Original function name: gtk_scrolled_window_new
gtk_scrolled_window_new               (GtkAdjustment     *hadjustment,
						      GtkAdjustment     *vadjustment);
// Original function name: gtk_container_add
gtk_container_add)
void	       gtk_scrolled_window_add_with_viewport (GtkScrolledWindow *scrolled_window,
						      GtkWidget		*child);
// Original function name: gtk_separator_new
gtk_separator_new      (GtkOrientation orientation);
// Original function name: gtk_style_context_get_border_color
gtk_style_context_get_border_color     (GtkStyleContext *context,
                                             GtkStateFlags    state,
                                             GdkRGBA         *color);
// Original function name: gtk_style_context_get_state
gtk_style_context_get_state    (GtkStyleContext *context);
// Original function name: gtk_style_context_add_provider
gtk_style_context_add_provider_for_screen    (GdkScreen        *screen,
                                                   GtkStyleProvider *provider,
                                                   guint             priority);
// Original function name: gtk_render_background
gtk_render_background)
void gtk_style_context_get_background_color (GtkStyleContext *context,
                                             GtkStateFlags    state,
                                             GdkRGBA         *color);
// Original function name: gtk_text_buffer_insert
gtk_text_buffer_insert            (GtkTextBuffer *buffer,
                                        GtkTextIter   *iter,
                                        const gchar   *text,
                                        gint           len);
// Original function name: gtk_text_buffer_create_mark
gtk_text_buffer_create_mark (GtkTextBuffer     *buffer,
                                            const gchar       *mark_name,
                                            const GtkTextIter *where,
                                            gboolean           left_gravity);
// Original function name: gtk_text_buffer_move_mark 
gtk_text_buffer_move_mark   (GtkTextBuffer     *buffer,
                                            GtkTextMark       *mark,
                                            const GtkTextIter *where);
// Original function name: gtk_text_buffer_set_text
gtk_text_buffer_set_text          (GtkTextBuffer *buffer,
                                        const gchar   *text,
                                        gint           len);
// Original function name: gtk_text_buffer_create_tag 
gtk_text_buffer_create_tag (GtkTextBuffer *buffer,
                                           const gchar   *tag_name,
                                           const gchar   *first_property_name,
                                           ...);
// Original function name: gtk_text_buffer_get_end_iter
gtk_text_buffer_get_end_iter            (GtkTextBuffer *buffer,
                                              GtkTextIter   *iter);
// Original function name: gtk_text_buffer_insert_with_tags
gtk_text_buffer_insert_with_tags          (GtkTextBuffer     *buffer,
                                                   GtkTextIter       *iter,
                                                   const gchar       *text,
                                                   gint               len,
                                                   GtkTextTag        *first_tag,
                                                   ...) G_GNUC_NULL_TERMINATED;
// Original function name: gtk_text_buffer_create_tag
gtk_text_buffer_create_tag (GtkTextBuffer *buffer,
                                           const gchar   *tag_name,
                                           const gchar   *first_property_name,
                                           ...);
// Original function name: g_new
g_new          (const gchar       *name);
// Original function name: gtk_text_view_get_buffer
gtk_text_view_get_buffer            (GtkTextView   *text_view);
// Original function name: gtk_text_view_scroll_mark_onscreen
gtk_text_view_scroll_mark_onscreen  (GtkTextView   *text_view,
                                                    GtkTextMark   *mark);
// Original function name: gtk_widget_show
gtk_widget_show                (GtkWidget           *widget);
// Original function name: gtk_widget_queue_draw
gtk_widget_queue_draw	  (GtkWidget	       *widget);
// Original function name: gtk_widget_get_events
gtk_widget_get_events	(GtkWidget	*widget);
// Original function name: gtk_widget_set_events
gtk_widget_set_events	  (GtkWidget	       *widget,
					   gint			events);
// Original function name: gtk_widget_set_valign 
gtk_widget_set_valign        (GtkWidget *widget,
                                       GtkAlign   align);
// Original function name: gtk_widget_set_halign 
gtk_widget_set_halign        (GtkWidget *widget,
                                       GtkAlign   align);
// Original function name: gtk_widget_get_allocated_width 
gtk_widget_get_allocated_width    (GtkWidget     *widget);
// Original function name: gtk_widget_get_style_context 
gtk_widget_get_style_context (GtkWidget *widget);
// Original function name: gtk_widget_get_allocated_height 
gtk_widget_get_allocated_height   (GtkWidget     *widget);
// Original function name: gtk_widget_get_allocated_height
gtk_widget_get_allocated_height   (GtkWidget     *widget);
// Original function name: gtk_widget_get_allocated_width
gtk_widget_get_allocated_width    (GtkWidget     *widget);
// Original function name: gtk_widget_get_window 
gtk_widget_get_window             (GtkWidget    *widget);
// Original function name: g_object_unref
g_object_unref)
G_DEFINE_AUTOPTR_CLEANUP_FUNC(GtkRequisition, gtk_requisition_free)

G_END_DECLS



// Original function name: gtk_widget_show_all
gtk_widget_show_all            (GtkWidget           *widget);
// Original function name: gtk_widget_get_style_context
gtk_widget_get_style_context (GtkWidget *widget);
// Original function name: gtk_widget_get_window
gtk_widget_get_window             (GtkWidget    *widget);
// Original function name: gtk_widget_destroy
gtk_widget_destroy		  (GtkWidget	       *widget);
// Original function name: gtk_widget_set_size_request
gtk_widget_set_size_request    (GtkWidget           *widget,
                                           gint                 width,
                                           gint                 height);
// Original function name: gtk_window_set_default_icon_list
gtk_window_set_default_icon_list        (GList      *list);
// Original function name: gtk_window_set_default_icon_from_file
gtk_window_set_default_icon_from_file   (const gchar *filename,
						    GError     **err);
// Original function name: gtk_window_set_position
gtk_window_set_position             (GtkWindow           *window,
						GtkWindowPosition    position);
// Original function name: g_new
g_new)
GtkWidget* gtk_color_selection_dialog_new                 (const gchar *title);
// Original function name: g_new
g_new               (const gchar            *title);
// Original function name: gtk_box_new
gtk_box_new)
GtkWidget * gtk_hbox_new      (gboolean homogeneous,
                               gint     spacing);
// Original function name: gtk_separator_new
gtk_separator_new)
GtkWidget* gtk_hseparator_new      (void);
// Original function name: gtk_widget_modify_font
gtk_widget_modify_font        (GtkWidget            *widget,
                                           PangoFontDescription *font_desc);
// Original function name: gtk_render_background
gtk_render_background)
void      gtk_style_apply_default_background (GtkStyle     *style,
                                              cairo_t      *cr,
                                              GdkWindow    *window,
                                              GtkStateType  state_type,
                                              gint          x,
                                              gint          y,
                                              gint          width,
                                              gint          height);
// Original function name: gtk_widget_get_style_context
gtk_widget_get_style_context)
GtkStyle *  gtk_widget_get_style          (GtkWidget            *widget);
// Original function name: gtk_box_new
gtk_box_new)
GtkWidget * gtk_vbox_new      (gboolean homogeneous,
                               gint     spacing);
// Original function name: gtk_separator_new
gtk_separator_new)
GtkWidget* gtk_vseparator_new      (void);
// Original function name: cairo_paint 
cairo_paint (cairo_t *cr);
// Original function name: cairo_set_operator
cairo_set_operator (cairo_t *cr, cairo_operator_t op);
// Original function name: cairo_rectangle
cairo_rectangle_int {
    int x, y;
// Original function name: cairo_show_text
cairo_show_text (cairo_t *cr, const char *utf8);
// Original function name: cairo_set_source_rgb
cairo_set_source_rgb (cairo_t *cr, double red, double green, double blue);
// Original function name: cairo_surface_destroy
cairo_surface_destroy (cairo_surface_t *surface);
// Original function name: cairo_close_path
cairo_close_path (cairo_t *cr);
// Original function name: cairo_fill_preserve
cairo_fill_preserve (cairo_t *cr);
// Original function name: cairo_set_font_size
cairo_set_font_size (cairo_t *cr, double size);
// Original function name: cairo_select_font_face
cairo_select_font_face (cairo_t              *cr,
			const char           *family,
			cairo_font_slant_t   slant,
			cairo_font_weight_t  weight);
// Original function name: cairo_set_source_surface
cairo_set_source_surface (cairo_t	  *cr,
			  cairo_surface_t *surface,
			  double	   x,
			  double	   y);
// Original function name: cairo_stroke
cairo_stroke (cairo_t *cr);
// Original function name: cairo_set_source_rgba
cairo_set_source_rgba (cairo_t *cr,
		       double red, double green, double blue,
		       double alpha);
// Original function name: cairo_fill
cairo_fill_rule {
    CAIRO_FILL_RULE_WINDING,
    CAIRO_FILL_RULE_EVEN_ODD
} cairo_fill_rule_t;
// Original function name: cairo_paint
cairo_paint (cairo_t *cr);
// Original function name: cairo_destroy
cairo_destroy_func_t) (void *data);
// Original function name: cairo_set_source_rgba 
cairo_set_source_rgba (cairo_t *cr,
		       double red, double green, double blue,
		       double alpha);
// Original function name: cairo_create
cairo_create (cairo_surface_t *target);
// Original function name: cairo_set_line_width
cairo_set_line_width (cairo_t *cr, double width);
// Original function name: cairo_move_to
cairo_move_to (cairo_t *cr, double x, double y);
// Original function name: cairo_line_to
cairo_line_to (cairo_t *cr, double x, double y);
// Original function name: g_new
g_new (int                        letter_spacing);
// Original function name: g_free
g_free     (PangoGlyphString *string);
// Original function name: g_new
g_new      (void);
// Original function name: cairo_create
cairo_create_context (cairo_t   *cr);
// Original function name: g_new
g_new     (void);
// Original function name: g_handle_render_cairo
g_handle_render_cairo     (RsvgHandle * handle, cairo_t * cr);
// Original function name: g_handle_new_from_file
g_handle_new_from_file (const gchar * file_name, GError ** error);
// Original function name: g_handle_close
g_handle_close		(RsvgHandle * handle, GError ** error);
// Original function name: g_object_unref
g_object_unref)
void rsvg_handle_free (RsvgHandle * handle);
// Original function name: g_object_unref
g_object_unref)
void                gdk_pixbuf_animation_unref           (GdkPixbufAnimation *animation);

// Original function name: gdk_pixbuf_new_from_file
gdk_pixbuf_new_from_file_utf8 (const char *filename,
                                          GError    **error);
// Original function name: g_free
g_free_ptr, (png_structp, png_voidp));
// Original function name: g_malloc
g_malloc_ptr, (png_structp,
    png_alloc_size_t));

// Original function name: g_ptr_array_new
g_ptr_array_new                (void);
// Original function name: g_async_queue_push
g_async_queue_push                 (GAsyncQueue      *queue,
                                                 gpointer          data);
// Original function name: g_clear_error
g_clear_error         (GError       **err);
// Original function name: g_free
g_free (*pp);
// Original function name: g_list_remove
g_list_remove                  (GList            *list,
					 gconstpointer     data) G_GNUC_WARN_UNUSED_RESULT;
// Original function name: g_list_sort
g_list_sort                    (GList            *list,
					 GCompareFunc      compare_func) G_GNUC_WARN_UNUSED_RESULT;
// Original function name: g_list_length
g_list_length                  (GList            *list);
// Original function name: g_list_prepend
g_list_prepend                 (GList            *list,
					 gpointer          data) G_GNUC_WARN_UNUSED_RESULT;
// Original function name: g_free
g_free	          (gpointer	 mem);
// Original function name: g_malloc
g_malloc         (gsize	 n_bytes) G_GNUC_MALLOC G_GNUC_ALLOC_SIZE(1);
// Original function name: g_new
g_new        (const char *str);
// Original function name: g_free
g_free              (GString         *string,
                                         gboolean         free_segment);
// Original function name: g_new
g_new               (const gchar     *init);
// Original function name: g_free
g_free     (GTestLogMsg    *tmsg);
// Original function name: g_thread_new
g_thread_new                    (const gchar    *name,
                                                 GThreadFunc     func,
                                                 gpointer        data);
// Original function name: g_usleep
g_usleep                (gulong       microseconds);
// Original function name: g_free
g_free (tem);
// Original function name: g_thread_new
GThread *g_thread_create       (GThreadFunc       func,
                                gpointer          data,
                                gboolean          joinable,
                                GError          **error);
// Original function name: g_thread_init
g_thread_init                   (gpointer vtable);

// Original function name: g_object_unref
g_object_unref                    (gpointer        object);
// Original function name: g_signal_connect
g_signal_connect_object           (gpointer	       instance,
					       const gchar    *detailed_signal,
					       GCallback       c_handler,
					       gpointer	       gobject,
					       GConnectFlags   connect_flags);
// Original function name: g_signal_connect
g_signal_connect_closure_by_id	      (gpointer		  instance,
					       guint		  signal_id,
					       GQuark		  detail,
					       GClosure		 *closure,
					       gboolean		  after);
